#!/usr/bin/env bash

set -euo pipefail

echo $(pwd)
source bin/utils.bash

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

asdf_hashlink_plugin_path() {
  # shellcheck disable=SC2005
  echo "$(dirname "$(dirname "$0")")"
}
asdf_hashlink_build_source_dir() {
  echo "$(asdf_hashlink_plugin_path)/source"
}

install_hashlink() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$install_type" != "version" ]; then
    fail "asdf-hashlink supports release installs only"
  fi

  local architecture

  case "$(uname -m)" in
  x86_64 | x86-64 | x64 | amd64) architecture="64" ;;
  *) fail "Unsupported architecture" ;;
  esac

  case "$OSTYPE" in
  darwin*) platform="osx" ;;
  linux*) platform="linux${architecture}" ;;
  *) fail "Unsupported platform" ;;
  esac
  echo ${install_path}
  local release_file="$ASDF_DOWNLOAD_PATH/$TOOL_NAME-$ASDF_INSTALL_VERSION.tar.gz"
  local build_dir="$ASDF_DOWNLOAD_PATH"
  local source_path="${release_file}"
  (
    echo "âˆ— Downloading Hashlink source..."

    download;

    # echo ${build_dir}
    # #cd hashlink-${version}
    # mkdir -p "${build_dir}"
    # tar -zxf "$source_path" -C "${build_dir}" --strip-components=1
    cd ${build_dir}
    make
    PREFIX=$ASDF_DATA_DIR/installs/hashlink/${version}
    echo $PREFIX
    make install

    rm -rf "$source_path"
    rm -rf "$build_dir"

    # echo "The installation was successful!"
  ) || (
    rm -rf "$source_path"
    rm -rf "$build_dir"
    fail "An error occurred"
  )
}

install_hashlink "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
